
                                                       ***************BACKEND GUIDE*********************

***GET AND POST request***

=>GET requests are primarily used for data fetching form server where the parameters are visible in the URL
=>POST requests are used for submitting data to the server in a way that's not visible in the URL and is suitable for larger data sets and sensitive information.

In summary, GET requests are commonly used for retrieving resources like web pages or specific data from a server, while POST requests are used to send data to a
server to create, update, or modify resources (such as submitting a form with user details). 

****Express and Databse(MongoDB)***
=>Express : Express is a popular web application framework for Node.js used primarily for building server-side applications
=>Mongoose : Mongoose is an Object Data Modeling (ODM) library for MongoDB in Node.js. It provides a straightforward schema-based solution to model your application data.
=>EJS : EJS is a templating language for Node.js that embeds JavaScript within HTML to create dynamic web pages by integrating data, logic, and HTML structure in a single file.

****CURD(Create,Update,Read,Delete)

Routes:
GET /comments-list all comments
GET /comments/new - form to create new comment
POST /comments-create a new comment on server
GET /comments/:id- get details of  one specific comment (using id)
GET /comments/:id/edit - form to edit spefic comment
PATCH /comments/:id- update one comment on server
DELETE /comments/:id - Delete one comment on server




*************Database   Mongodb******************
It is No-sql database- means it do not store tha data in a structured way in a table like Sql database.

Mongo is commonly used in node and express.

1.Install the MongoDb Community server
2.Install the MongoDb shell
3.Open the git bash
4.Type--> mongosh command in git bash
5.To exit --> Ctr+c  or .exit
6.To Create database
7.->use farmStand
8.->show dbs  (It show the databases)
9.->db.products.find()

**********Mongoose***********(ODM-Obejct data mapper)
One of the popular libraries for MongoDB object modeling in Node.js is Mongoose.

***downloading mongoose and connect it to javascript without express app***
1.Make an empty folder
2.Open git bash in it
3.->ls
4.->npm init -y
5.->npm i mongoose

**********************************************************Tweets Backend Project*************************************************************************

***Express App Setup**
1.Make a folder name(Tweets)
2.Open git bash in here
3.In git bash type command (npm i express mongoose ejs)
4.Open vs code and make a file (app.js) in (Tweets)
5.Write code in app.js =>It is our server side code with Express 
->(app.js)
const express=require("express");
const app=express();
const path=require('path');

app.set('views',path.join(__dirname,'views'));
app.set("view engine",'ejs');
app.get('/',(req,res)=>{
    res.send("Hello Gojira")
})

app.listen(3000,()=>{
    console.log("App is listning on port 3000!");
})

6.nodemon index.js ->in git bash
7.localhost:3000  ->search in browser

***Mongoose Model Setup***
8. Add this code also for mongo connection in app.js
const express=require("express");
const app=express();
const path=require('path');
//Mongo connection
const mongoose =require('mongoose')
mongoose.connect('mongodb://127.0.0.1:27017/tweetApp').then(()=>{
    console.log("Mongo Connection Open!!");
}).catch(err=>{
    console.log("OHH no Mongo connection error");
    console.log(err);

})

***Create Models***
1.Make a folder name(models) in folder (Tweets)
2.Make **tweets.js** in models folder
3.Write this code to create models in (tweets.js)
const mongoose=require('mongoose');
//Creating models 
const tweetSchema=new mongoose.Schema({
    name:{
        type:String,
        required:true
    },
    price:{
        type:Number,
        required:true,
        min:0
    },
    category:{
        type:String,
        lowercase:true,
        enum:['good','verygood','notgood']
    }
})

const Tweet=mongoose.model('Tweet',tweetSchema);
module.exports=Tweet;

4.Make **comments.js** file in (Tweets) folder
5.Write code in (comments.js)
//creating models and require it in here
const Tweet=require('./models/tweets')
const mongoose =require('mongoose')
mongoose.connect('mongodb://127.0.0.1:27017/tweetApp').then(()=>{
    console.log("Mongo Connection Open!!");
}).catch(err=>{
    console.log("OHH no Mongo connection error");
    console.log(err);

})

//Other method :Use insertMany method  to create many  Product 
const commentsTweet=[
    {
        name:"This is nice",
        price:1.00,
        category:"good"
    },
    {
        name:"This is wrong",
        price:2.00,
        category:"verygood"
    },
    {
        name:"I love to GoodZilaa.",
        price:4.00,
        category:"verygood"
    },
    {
        name:"I dont like Superman.",
        price:3.00,
        category:"notgood"
    }

]
Tweet.insertMany(commentsTweet).then(res=>{
    console.log(res);
}).catch(e=>{
    console.log(e);
})

6.Open git bash (node comments.js)

7.***Check(Express+MongoDB) farmStand in MongoDb***
1.Open another git bash in Tweets (Folder)
2.mongosh ->in git bash
3.use tweetApp 
4.shows collections
5.db.tweets.find()


---------------------------------------------------------------------

****************CURD *******************
1.Write this code in app.js
//****Route 1 to view All products****
const Tweet=require('./models/tweets')//Import Tweet
//Route 1 to view all tweets
app.get('/tweets',async(req,res)=>{
    const tweets=await Tweet.find({})
    console.log(tweets);
    res.send("All Tweets will be here")
})

2.Go to git bash(node)->nodemon app.js
3.Go to browser and search=>localhost:3000/products

************Now make EJS (html) file **********
1.Make a folder (views) in (Tweets) folder
2.Make a comments folder in views
3.In comments folder make-> home.ejs (html folder)
4.write code in home.ejs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Tweets</title>
</head>
<body>
        <h1>All Tweets!</h1>
    <ul>
        <%for (let tweet of tweets){%>

             <li><a href="/tweets/<%= tweet._id %>"><%= tweet.name %></a></li>

        <%}%>
    </ul>
    
</body>
</html>

5.**Find and get all Tweets**
//Route 1 to view all tweets
app.get('/tweets',async(req,res)=>{
    const tweets=await Tweet.find({})
    res.render('comments/home',{tweets})//use this to render home.ejs(html file) from views folder to localhost:3000/tweets
})

*** Route 4 html Show particular  details about  a tweet***
6.Make a details.ejs(html file) in views/comments folder
7.Write this code in show.ejs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%tweet.name%></title>
</head>
<body>
     <h1><%=tweet.name%></h1>
    <ul>
        <li>Ratings:<%=tweet.price%></li>
        <li>About Tweet:<%=tweet.category%></li>
        
    </ul>
     <!-- link to go back -->
    <a href="/tweets">All Tweets</a>
</body>
</html>

8.******Route 4 setup to view perticular Tweet details*****
//Route 4 to view Particular Tweet details
app.get('/tweets/:id',async(req,res)=>{
    const {id}=req.params;
    const tweet= await Tweet.findById(id) //this const tweet is used in details.esj as tweet.name 
    res.render('comments/details',{tweet})
})


9.***Route 2 to Create new New*****
10.Add this in app.js
app.use(express.urlencoded({extended:true}))//to use post request in app.js
//To show the previous category option  during edit the tweet
const categories=['good','verygood','notgood'];

//Route 2 to create a new tweet it is use to render thr form from new.ejs
app.get('/tweets/new',(req,res)=>{
    res.render('comments/new',{categories})
})
//Route 3 is use to create and submit the form data of  new.ejs form through route 2
app.post('/tweets',async(req,res)=>{
    // console.log(req.body);
    const newtweet=new Tweet(req.body);
    await newtweet.save()
    res.redirect(`/tweets/${newtweet._id}`)

})

11.make new.ejs in comments folder
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Tweet</title>
</head>
<body>
    <h1>Add a Tweet</h1>
    <form action="/tweets" method="POST">
        
        <label for="name">Tweet</label>
        <input type="text" name="name" id="name" placeholder="tweet">
        <label for="price">Ratings</label>
        <input type="number" id="price" name="price" placeholder="ratings">
        <label for="category">About Tweet</label>
        <select name="category" id="category">
        //Dynamic options selection
            <% for(let category of categories) { %>
                <option value="<%= category %>"><%= category %></option>
            <% } %>
        </select>
        <button>Submit</button>
    </form>
    
</body>
</html>


-------------------------------------------------------------------------------
***Route 5  to update all dedails in the Tweet ****
1.In app.js 
//Route 5 to Update all details of the Tweet
app.get('/tweets/:id/edit',async(req,res)=>{
    const {id}=req.params;
    const tweet = await Tweet.findById(id)
    res.render('comments/edit',{tweet,categories})
})
//Route 6  this root is trigger by the form when we submit it '/tweets/:id'
app.put('/tweets/:id',async(req,res)=>{
    const {id}=req.params;
    const tweet=await Tweet.findByIdAndUpdate(id,req.body,{runvalidators:true,new:true})
    res.redirect(`/tweets/${tweet._id}`)

})

//as we know we cannot use the put request directly so we need to install method override in node app.js

2. To use put-> npm i method-override (in git bash)
3. //to use put request in app.js
->const methodOverride=require('method-override')
->app.use(methodOverride('_method'))
4.make edit.ejs in veiws/comments folder
5. write code in edit.ejs
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit</title>
</head>
<body>
    <h1>Edit Tweet</h1>
    <form action="/tweets/<%=tweet._id%>?_method=PUT" method="POST"> 
        
        <label for="name">Tweet</label>
        <input type="text" name="name" id="name" placeholder="tweet" value="<%=tweet.name%>">
        <label for="price">Ratings</label>
        <input type="number" id="price" name="price" placeholder="ratings" value="<%=tweet.price%>">
        <label for="category">About Tweet</label>
        <select name="category" id="category">
       
            <% for(let category of categories) { %>
                <option value="<%= category %>" <%= tweet.category===category?'selected':''%>><%= category %></option>
            <% } %>
        </select>
        <button>Submit</button>
    </form>
    
</body>
</html>

6.write this code in details.ejs for link->
 <a href="/tweets/<%=tweet._id%>/edit">Edit Tweets</a>
7. Add link in edit.ejs
<a href="/tweets/<%=tweet._id%>">Cancel Edit</a>

8.//To show the previous category option  during edit the product
->const categories=['good','verygood','notgood']; //in app.js


*********Route 7 to Delete**********
1.In app.js
//Route 7 to Delete Tweet
app.delete('/tweets/:id',async(req,res)=>{
    const {id}=req.params;
    const deletetweet=await Tweet.findByIdAndDelete(id)
    res.redirect('/tweets');

})
2.Add code in details.ejs
<!-- Delte tweet -->
    <form action="/tweets/<%=tweet._id%>?_method=DELETE" method="POST">
        <button>Delete</button>
    </form>

****************Filter by category*******************************
1.change in app.js
    
//Route 1 to view all tweets
app.get('/tweets',async(req,res)=>{
    //to show the all Tweets related to same About Tweet(category)
   const {category}=req.query;
   if(category){
    const tweets=await Tweet.find({category})
    res.render('comments/home',{tweets,category})

   }else{
    const tweets=await Tweet.find({})
    // console.log(tweets);
    // res.send("All Tweets will be here")
    res.render('comments/home',{tweets,category:"ALL"})//use this to render home.ejs(html file) from views folder to localhost:3000/tweets
   }
    
})
2.Change ul list  in details.ejs
<li>About: <a href="/tweets?category=<%= tweet.category %>"><%= tweet.category %></a></li>
3.Add this in home.ejs
<a href="/tweets/new">New Tweet</a>




